#!/bin/bash

#
# 正規表現の特殊文字をエスケープする.
#
function _daily-coding.escape_regexp
{
    echo "$1" | sed -r 's/([,[\*^$()+?{|])/\\\1/g'
}

#
# プロジェクトのルートディレクトリのパス.
#
function _daily-coding.root_path
{
    (cd "$(dirname "${BASH_SOURCE}")"/../.. && pwd)
}

#
# ワークスペースのルートディレクトリのパス.
#
function _daily-coding.root_workspace_path
{
    echo "${DAILY_CODING_ROOT_WORKSPACE_PATH:-$(_daily-coding.root_path)/workspace}"
}

#
# 任意のパスをワークスペースの最上位ディレクトリのパスに変換する.
# $1 がワークスペース外のパスである場合は空文字列を出力する.
#
function _daily-coding.to_workspace_path
{
    declare -r path="${1:-$(pwd)}"
    declare -r root_workspace_path="$(_daily-coding.root_workspace_path)"

    if [[ "$(realpath "${path}" --relative-to "${root_workspace_path}")" != ../* ]]; then
        echo "${root_workspace_path}/$(echo "${path#${root_workspace_path}/}" | cut -d/ -f1)"
    else
        echo ''
    fi
}

#
# 任意のパスをワークスペース名にパスに変換する.
# $1 がワークスペース外のパスである場合は空文字列を出力する.
#
function _daily-coding.to_workspace_name
{
    declare -r workspace_path="$(_daily-coding.to_workspace_path "${1:-$(pwd)}")"
    echo "${workspace_path##*/}"
}

#
# 任意のパスをコレクションの最上位ディレクトリのパスに変換する.
# $1 がコレクション外のパスである場合は空文字列を出力する.
#
function _daily-coding.to_collection_path
{
    declare -r path="${1:-$(pwd)}"
    declare -r root_workspace_path="$(_daily-coding.root_workspace_path)"
    declare -r relative_path="$(realpath "${root_workspace_path}" -m --relative-to "${path}")"

    if [[ "${relative_path}" =~ ^..(/..)+$ ]]; then
        declare -r workspace_collection_name="$(
            realpath "${path}" -m --relative-base "${root_workspace_path}" | cut -d/ -f1,2)"
        echo "${root_workspace_path}/${workspace_collection_name}"
    else
        echo ''
    fi
}

#
# 任意のパスをコレクション名に変換する.
# $1 がコレクション外のパスである場合は空文字列を出力する.
#
function _daily-coding.to_collection_name
{
    declare -r collection_path="$(_daily-coding.to_collection_path "${1:-$(pwd)}")"
    echo "${collection_path##*/}"
}

#
# カレントディレクトリを基準としたファイルのパスを特定する.
#
# $1 に任意のコレクションに含まれるファイルのパスを指定する.
# $2 に整数 N を指定すると, N 個前後のワークスペースに含まれるファイルのパスを特定する.
#
# パスを特定できた場合はカレントディレクトリを基準とした相対パス,
# パスを特定できなかった場合は空文字列を標準出力に出力する.
#
function _daily-coding.locate_file
{
    declare -r base_collection_path="$(_daily-coding.to_collection_path "$1")"
    if [[ "${base_collection_path}" == '' ]]; then
        return
    fi

    declare -r root_workspace_path="$(_daily-coding.root_workspace_path)"
    declare -r base_workspace_name="$(_daily-coding.to_workspace_name "$1")"
    declare -r base_collection_name="$(_daily-coding.to_collection_name "$1")"
    declare -r relative_file_path="$(realpath "${1}" -m --relative-to "${base_collection_path}")"

    declare -r n=$2
    declare -r target_file_path="$(
        ls -1 "${root_workspace_path}"/*/"${base_collection_name}/${relative_file_path}" |
            ([[ $n -ge 0 ]] && cat || tac) |
            sed -n "/${base_workspace_name}/,$ p" |
            sed -n "$((n < 0 ? -n+1 : n+1)) p"
    )"

    if [[ ! -f "${target_file_path}" ]]; then
        echo ''
    else
        echo "$(realpath "${target_file_path}" --relative-to "$(pwd)")"
    fi
}

#
# カレントディレクトリを基準としたコレクションの相対パスを特定する.
#
# $1 にコレクション以下のパスを指定する.
# $2 に整数 N を指定すると, N 個前後のワークスペースに含まれるコレクションのパスを特定する.
#
# パスを特定できた場合はカレントディレクトリを基準とした相対パス,
# パスを特定できなかった場合は空文字列を標準出力に出力する.
#
function _daily-coding.locate_collection
{
    declare -r base_collection_path="$(_daily-coding.to_collection_path "$1")"
    if [[ "${base_collection_path}" == '' ]]; then
        return
    fi

    declare -r root_workspace_path="$(_daily-coding.root_workspace_path)"
    declare -r base_collection_name="$(_daily-coding.to_collection_name "$1")"
    declare -r base_workspace_name="$(_daily-coding.to_workspace_name "$1")"

    declare -r n=$2
    declare -r target_collection_path="$(
        ls -1d "${root_workspace_path}"/*/"${base_collection_name}" |
            ([[ $n -ge 0 ]] && cat || tac) |
            sed -n "/${base_workspace_name}\/${base_collection_name}/,$ p" |
            sed -n "$((n < 0 ? -n+1 : n+1)) p"
    )"

    if [[ ! -d "${target_collection_path}" ]]; then
        echo ''
    else
        echo "$(realpath "${target_collection_path}" --relative-to "$(pwd)")"
    fi
}

#
# カレントディレクトリを基準としたワークスペースの相対パスを特定する.
#
# $1 にワークスペース以下のパスを指定する.
# $2 に整数 N を指定すると, N 個前後のワークスペースのパスを特定する.
#
# パスを特定できた場合はカレントディレクトリを基準とした相対パス,
# パスを特定できなかった場合は空文字列を標準出力に出力する.
#
function _daily-coding.locate_workspace
{
    declare -r root_workspace_path="$(_daily-coding.root_workspace_path)"
    declare -r base_workspace_path="$(_daily-coding.to_workspace_path "$1")"
    declare -r base_workspace_name="$(_daily-coding.to_workspace_name "$1")"
    declare -r n=$2

    if [[ "${base_workspace_name}" == '' ]]; then
        echo ''
        return
    fi

    declare -r target_workspace_path="$(
        cat <(ls -1d "${root_workspace_path}"/*) \
            <(echo "${root_workspace_path}/${base_workspace_name}") |
            sort -u |
            ([[ $n -ge 0 ]] && cat || tac) |
            sed -n "/${base_workspace_name}/,$ p" |
            sed -n "$((n < 0 ? -n+1 : n+1)) p"
    )"

    if [[ "${target_workspace_path}" = '' ]]; then
        echo ''
    else
        echo "$(realpath "${target_workspace_path}" --relative-to "$(pwd)")"
    fi
}

function _daily-coding.generate_jsonl
{
    (
        cd "$(_daily-coding.root_workspace_path)"

        while read lines path
        do
            path="${path#./}"
            declare workspace="${path%%/*}"
            path="${path#*/}"
            declare collection="${path%%/*}"
            declare language="${collection##*.}"
            path="${path#*/}"
            declare file="${path}"

            if [[ "${path}" =~ \.[^.]*$ ]]; then
                declare extension="${BASH_REMATCH[0]}"
            else
                declare extension="${path}"
            fi

            echo "{\"workspace\": \"${workspace}\", \"collection\": \"${collection}\", \"language\": \"${language}\", \"file\": \"${file}\", \"extension\": \"${extension}\", \"lines\": ${lines}}"
        done < <(find . -type f | sort | xargs wc -l | sed -r '/^ *[0-9]+ total$/d')
    )
}

function _daily-coding.workspaces
{
    find "$(_daily-coding.root_workspace_path)" -mindepth 1 -maxdepth 1 -type d -printf '%P\n' | sort
}

function _daily-coding.collections
{
    find "$(_daily-coding.root_workspace_path)"/* -mindepth 1 -maxdepth 1 -type d -printf '%P\n' | sort -u
}

