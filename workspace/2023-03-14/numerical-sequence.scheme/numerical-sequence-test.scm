(use gauche.test)
(load "numerical-sequence")

(define main
    (lambda (arguments)
        (test-all)))

(define test-all
    (lambda ()
        (test.factorial)
        (test.fibonacci)
        (test.fizzbuzz)))

(define test.factorial
    (lambda ()
        (test-start "factorial")
        (test* "#0" 1 (factorial 0))
        (test* "#1" 1 (factorial 1))
        (test* "#2" 2 (factorial 2))
        (test* "#3" 6 (factorial 3))
        (test* "#4" 24 (factorial 4))
        (test* "#5" 120 (factorial 5))
        (test* "#6" 720 (factorial 6))
        (test* "#7" 5040 (factorial 7))
        (test* "#8" 40320 (factorial 8))
        (test* "#9" 362880 (factorial 9))
        (test* "#10" 3628800 (factorial 10))
        (test-end)))

(define test.fibonacci
    (lambda ()
        (test-start "fibonacci")
        (test* "#0" 0 (fibonacci 0))
        (test* "#1" 1 (fibonacci 1))
        (test* "#2" 1 (fibonacci 2))
        (test* "#3" 2 (fibonacci 3))
        (test* "#4" 3 (fibonacci 4))
        (test* "#5" 5 (fibonacci 5))
        (test* "#6" 8 (fibonacci 6))
        (test* "#7" 13 (fibonacci 7))
        (test* "#8" 21 (fibonacci 8))
        (test* "#9" 34 (fibonacci 9))
        (test* "#10" 55 (fibonacci 10))
        (test-end)))

(define test.fizzbuzz
    (lambda ()
        (test-start "fizzbuzz")
        (test* "#1" 1 (fizzbuzz 1))
        (test* "#2" 2 (fizzbuzz 2))
        (test* "#3" 'Fizz (fizzbuzz 3))
        (test* "#4" 4 (fizzbuzz 4))
        (test* "#5" 'Buzz (fizzbuzz 5))
        (test* "#6" 'Fizz (fizzbuzz 6))
        (test* "#7" 7 (fizzbuzz 7))
        (test* "#8" 8 (fizzbuzz 8))
        (test* "#9" 'Fizz (fizzbuzz 9))
        (test* "#10" 'Buzz (fizzbuzz 10))
        (test* "#11" 11 (fizzbuzz 11))
        (test* "#12" 'Fizz (fizzbuzz 12))
        (test* "#13" 13 (fizzbuzz 13))
        (test* "#14" 14 (fizzbuzz 14))
        (test* "#15" 'FizzBuzz (fizzbuzz 15))
        (test-end)))

